"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Django API
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∞—Ä–∫–∞—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä Django
"""
import aiohttp
import json
import logging
from config import API_BASE_URL, API_TOKEN, USER_ID

logger = logging.getLogger(__name__)


async def send_gift_to_api(gift_data: dict) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∞—Ä–∫–µ –≤ Django API
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–¥–∞—Ä–∫–æ–≤: Star Gifts –∏ –æ–±—ã—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    if not API_TOKEN:
        logger.warning("‚ö†Ô∏è API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ API")
        return False
    
    if not USER_ID:
        logger.warning("‚ö†Ô∏è USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ API")
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞
    gift_type = gift_data.get("gift_type", "star_gift")
    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {gift_type} –≤ Django API...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º user_id –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–¥–∞—Ä–∫–∞
    gift_data_with_user = gift_data.copy()
    gift_data_with_user["user"] = int(USER_ID)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    logger.info("--- üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API ---")
    logger.info(f"   üéÅ –¢–∏–ø –ø–æ–¥–∞—Ä–∫–∞: {gift_type}")
    logger.info(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {USER_ID}")
    logger.info(f"   üåê URL: {API_BASE_URL}/api/gifts/adds-gift/")
    logger.info("--- üì§ JSON –¥–∞–Ω–Ω—ã–µ ---")
    print(json.dumps(gift_data_with_user, indent=2, ensure_ascii=False))
    logger.info("--- üì§ –ö–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö ---")
    
    url = f"{API_BASE_URL}/api/gifts/adds-gift/"
    headers = {
        "Authorization": f"Bearer {API_TOKEN}",
        "Content-Type": "application/json"
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            logger.info("üåê –û—Ç–ø—Ä–∞–≤–ª—è—é HTTP POST –∑–∞–ø—Ä–æ—Å...")
            async with session.post(url, json=gift_data_with_user, headers=headers) as response:
                response_text = await response.text()
                logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: {response.status}")
                logger.info(f"üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response_text}")
                
                if response.status == 201:
                    logger.info(f"‚úÖ {gift_type} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {USER_ID}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status} - {response_text}")
                    return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ API: {e}")
        return False
