import os
import asyncio
import logging
import json 

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –î–ª—è —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç telethon.
# –ú—ã –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º TelegramClient.
from telethon import TelegramClient 

TARGET_CHAT_USERNAME = '@kupil_prodal_l9m' 

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    format='telethon-userbot | %(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# --- –ü–û–õ–£–ß–ï–ù–ò–ï –ö–õ–Æ–ß–ï–ô API –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ---
api_id_str = os.getenv("API_ID")
api_hash = os.getenv("API_HASH")

try:
    if not api_id_str or not api_hash:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è API_ID –∏–ª–∏ API_HASH.")
    api_id = int(api_id_str)
except (ValueError, TypeError) as e:
    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    logger.error("‚û°Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API_ID —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –∏ –æ–±–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    exit(1)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–ê TELEGRAM ---
client = TelegramClient("session/userbot", api_id, api_hash)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_attribute_details(gift_info_attributes: list, name: str) -> dict:
    """
    –ò—â–µ—Ç –∞—Ç—Ä–∏–±—É—Ç –ø–æ –∏–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è getattr() –≤–º–µ—Å—Ç–æ —è–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤.
    """
    attr_data = {
        'name': None,
        'rarity_permille': None,
        'original_details': None
    }
    
    # –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏
    target_attr = next((attr for attr in gift_info_attributes if getattr(attr, 'name', None) == name), None)
    
    if target_attr:
        attr_data['name'] = getattr(target_attr, 'name', None)
        
        # rarity_permille
        attr_data['rarity_permille'] = getattr(target_attr, 'rarity_permille', None)
        
        # StarGiftAttributeOriginalDetails 
        original_details = getattr(target_attr, 'original_details', None)
        if original_details:
            attr_data['original_details'] = {
                'id': getattr(original_details, 'id', None),
                'type': getattr(original_details, 'type', None),
                'name': getattr(original_details, 'name', None),
            }
    return attr_data

def extract_gift_data(action) -> dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è, —Ä–∞–±–æ—Ç–∞—è —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –∫–∞–∫ —Å "—á–µ—Ä–Ω—ã–º–∏ —è—â–∏–∫–∞–º–∏" (–ø—Ä–æ—Å—Ç–æ –∏–∑–≤–ª–µ–∫–∞—è —Å—Ç—Ä–æ–∫–∏/–∞—Ç—Ä–∏–±—É—Ç—ã).
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç 'gift' –∏–∑ 'action'
    gift_info = getattr(action, 'gift', None)
    if not gift_info:
        return {}

    # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∞—Ç—Ä–∏–±—É—Ç–æ–≤ ---
    attributes = getattr(gift_info, 'attributes', [])
    
    # Model (Candy Stripe)
    model_details = get_attribute_details(attributes, 'Candy Stripe')
    # Backdrop (Aquamarine)
    backdrop_details = get_attribute_details(attributes, 'Aquamarine')
    # Pattern (Stocking)
    pattern_details = get_attribute_details(attributes, 'Stocking')
            
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–∞—Ä–∫–∞ –∏ Slug ---
    ton_address = getattr(gift_info, 'slug', None) or str(getattr(gift_info, 'id', ''))
    gift_number = None
    
    slug = getattr(gift_info, 'slug', None)
    if slug and '-' in slug:
        number_part = slug.split('-')[-1]
        if number_part.isdigit():
            gift_number = '#' + number_part
        
    # --- –°–±–æ—Ä–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
    image_url = None
    # –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç "Candy Stripe" —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ 'document'
    candy_stripe_attr = next((attr for attr in attributes if getattr(attr, 'name', None) == 'Candy Stripe'), None)
    
    document = getattr(candy_stripe_attr, 'document', None)
    if document:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∏–∫–µ—Ä
        image_url = f"https://t.me/sticker/{getattr(document, 'id', '')}"
    
    # --- –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è ---
    data = {
        "ton_contract_address": ton_address, 
        # name: –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω
        "name": f"{getattr(gift_info, 'title', 'Gift')} {gift_number}" if gift_number else getattr(gift_info, 'title', 'Gift'),
        "image_url": image_url,
        # value_amount - —ç—Ç–æ —Å—É–º–º–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã.
        "price_ton": getattr(gift_info, 'value_amount', None) / 100 if getattr(gift_info, 'value_amount', None) else None, 
        "backdrop": backdrop_details['name'],
        "symbol": slug,
        
        # –ù–û–í–´–ï –ü–û–õ–Ø –†–ï–î–ö–û–°–¢–ò –ò –î–ï–¢–ê–õ–ò:
        "model_name": model_details['name'],
        "model_rarity_permille": model_details['rarity_permille'],
        "model_original_details": model_details['original_details'],
        
        "pattern_name": pattern_details['name'],
        "pattern_rarity_permille": pattern_details['rarity_permille'],
        "pattern_original_details": pattern_details['original_details'],
        
        "backdrop_name": backdrop_details['name'],
        "backdrop_rarity_permille": backdrop_details['rarity_permille'],
        "backdrop_original_details": backdrop_details['original_details'],

        # –û–±—â–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞
        "rarity_level": getattr(getattr(gift_info, 'rarity_level', None), 'name', None)
    }
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —É–¥–∞–ª—è—è None-–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞, –∫—Ä–æ–º–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    data = {k: v for k, v in data.items() if v is not None} 
    
    return data

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---

async def main():
    async with client:
        if not await client.is_user_authorized():
            logger.error("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
            return

        me = await client.get_me()
        user_info = f"{me.first_name or ''} (@{me.username})" if me else "Unknown User"
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º: {user_info.strip()}")
        
        try:
            logger.info(f"üîé –ò—â–µ–º —á–∞—Ç: {TARGET_CHAT_USERNAME}...")
            chat = await client.get_entity(TARGET_CHAT_USERNAME)
            chat_name = getattr(chat, 'title', getattr(chat, 'username', str(chat.id)))
            logger.info(f"üëç –ß–∞—Ç '{chat_name}' –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")

        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–∞—Ç–∞: {e}")
            return

        message_count = 0
        gift_data = None
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        async for message in client.iter_messages(chat, limit=50): 
            message_count += 1
            
            # üí° –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–ê –ü–û –ò–ú–ï–ù–ò –°–¢–†–û–ö–ò:
            if getattr(message, 'action', None) and type(message.action).__name__ == 'MessageActionStarGiftUnique':
                
                # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                gift_data = extract_gift_data(message.action)
                
                logger.warning(f"üéÅ –ù–∞–π–¥–µ–Ω Star Gift –≤ MSG_ID: {getattr(message, 'id', 'N/A')}! –ò–∑–≤–ª–µ–∫–∞—é –¥–∞–Ω–Ω—ã–µ...")
                
                break 

        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ '{chat_name}' –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}.")

        if gift_data:
            # 2. –í—ã–≤–æ–¥–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Å–æ–ª—å
            logger.info("--- üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è GiftSerializer (JSON-—Ñ–æ—Ä–º–∞—Ç) ---")
            print(json.dumps(gift_data, indent=4, ensure_ascii=False))
            logger.info("--------------------------------------------------")
        else:
            logger.info("‚ÑπÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã–π Star Gift –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")

if __name__ == "__main__":
    asyncio.run(main())