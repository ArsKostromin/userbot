import asyncio
import logging
import threading
import uvicorn
from fastapi import FastAPI, Request

# –¢–≤–æ–∏ –∏–º–ø–æ—Ä—Ç—ã
from config import LOG_FORMAT, LOG_DATE_FORMAT, LOG_LEVEL
from telegram_client import create_client, initialize_client
from gifts_listener import register_gift_listener, process_chat_history

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    format=LOG_FORMAT,
    level=getattr(logging, LOG_LEVEL),
    datefmt=LOG_DATE_FORMAT
)
logger = logging.getLogger(__name__)

app = FastAPI()


@app.post("/test")
async def test_endpoint(request: Request):
    data = await request.json()
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Django: {data}")
    return {"status": "ok", "message": "–ó–∞–ø—Ä–æ—Å –¥–æ—à—ë–ª –¥–æ userbot!"}


async def main_userbot():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ userbot'–∞: —Å–ª—É—à–∞–µ—Ç Telegram, –ª–æ–≤–∏—Ç –ø–æ–¥–∞—Ä–∫–∏ –∏ —Ç.–¥.
    """
    client = create_client()

    try:
        if not await initialize_client(client):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç")
            return

        await process_chat_history(client)
        register_gift_listener(client)

        logger.info("üîÑ Userbot –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —á–∞—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")

        await client.run_until_disconnected()

    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()
        logger.info("üëã Userbot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def run_fastapi():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç FastAPI —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    uvicorn.run(app, host="0.0.0.0", port=8080, log_level="info")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI –∏ userbot –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    server_thread = threading.Thread(target=run_fastapi, daemon=True)
    server_thread.start()

    asyncio.run(main_userbot())
