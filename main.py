import asyncio
import logging
from telethon import events
from telethon.tl.types import MessageService

from config import LOG_FORMAT, LOG_DATE_FORMAT, LOG_LEVEL
from telegram_client import create_client, initialize_client
from message_handler import handle_new_message

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    format=LOG_FORMAT,
    level=getattr(logging, LOG_LEVEL),
    datefmt=LOG_DATE_FORMAT
)
logger = logging.getLogger(__name__)


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è userbot'–∞
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –í–°–ï —á–∞—Ç—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç Star Gifts, –≥–∏—Ñ—Ç–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    client = create_client()

    try:
        if not await initialize_client(client):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç")
            return

        logger.info("üîÑ Userbot –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –í–°–ï —á–∞—Ç—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç Star Gifts –∏ –≥–∏—Ñ—Ç–æ–≤...")
        logger.info("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

        # --- 1Ô∏è‚É£ –û–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è --- –≥–æ–≤–Ω–æ
        @client.on(events.NewMessage)
        async def new_message_handler(event):
            await handle_new_message(event, client)

        # --- 2Ô∏è‚É£ –°–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≥–¥–µ –∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ–¥–∞—Ä–∫–∏) ---
        @client.on(events.Raw)
        async def raw_update_handler(event):
            try:
                # –ï—Å–ª–∏ –∞–ø–¥–µ–π—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç message (–≤ —Ç–æ–º —á–∏—Å–ª–µ MessageService)
                if hasattr(event, "message") and isinstance(event.message, MessageService):
                    logger.debug(f"üì° –°–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {type(event.message.action).__name__}")
                    await handle_new_message(event, client)
                # –ò–Ω–æ–≥–¥–∞ Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–∞—á–∫—É –∞–ø–¥–µ–π—Ç–æ–≤
                elif hasattr(event, "updates"):
                    for update in event.updates:
                        if hasattr(update, "message") and isinstance(update.message, MessageService):
                            fake_event = type("FakeEvent", (), {"message": update.message})
                            await handle_new_message(fake_event, client)
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ raw —Å–æ–±—ã—Ç–∏—è: {e}")

        # --- 3Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—á–Ω—ã–π —Ü–∏–∫–ª ---
        await client.run_until_disconnected()

    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()
        logger.info("üëã Userbot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
