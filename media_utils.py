import os
import logging
from telethon.tl.types import Document, PhotoSize

logger = logging.getLogger(__name__)

MEDIA_ROOT = "/app/media"
BASE_URL = "https://teststudiaorbita.ru"

async def download_thumbnail_image(client, document: Document, slug: str) -> str | None:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª —Å—Ç–∏–∫–µ—Ä–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (webp/tgs/png/...),
    –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –ø–∏—à–µ—Ç –≤—Å—ë –≤ –ª–æ–≥–∏.
    """
    os.makedirs(MEDIA_ROOT, exist_ok=True)
    relative_path = None

    try:
        if not document:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚Äî –Ω–µ—á–µ–≥–æ —Å–∫–∞—á–∏–≤–∞—Ç—å.")
            return None

        thumbs = getattr(document, "thumbs", None)
        thumb_ok = False

        # 1. –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –ø—Ä–µ–≤—å—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if thumbs:
            best_thumb = thumbs[-1]
            if isinstance(best_thumb, PhotoSize):
                thumb_path = os.path.join(MEDIA_ROOT, f"{slug}_thumb")
                logger.info(f"üì• –ü—Ä–æ–±—É—é —Å–∫–∞—á–∞—Ç—å –ø—Ä–µ–≤—å—é –≤ {thumb_path} ...")
                await client.download_media(best_thumb, file=thumb_path)
                if os.path.exists(thumb_path) and os.path.getsize(thumb_path) > 1000:
                    thumb_ok = True
                    relative_path = f"/media/{os.path.basename(thumb_path)}"
                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–µ–≤—å—é –∏–∑ thumbs: {thumb_path}")

        # 2. –ï—Å–ª–∏ –ø—Ä–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –∫–∞—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∫–∞–∫ –µ—Å—Ç—å
        if not thumb_ok:
            logger.info("‚öôÔ∏è –ü—Ä–µ–≤—å—é –Ω–µ—Ç –∏–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ ‚Äî –∫–∞—á–∞—é –æ—Ä–∏–≥–∏–Ω–∞–ª...")
            orig_path = os.path.join(MEDIA_ROOT, slug)
            file_path = await client.download_media(document, file=orig_path)
            if file_path:
                relative_path = f"/media/{os.path.basename(file_path)}"
                logger.info(f"‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª —Å–∫–∞—á–∞–Ω: {file_path}")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
                return None

        # 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π URL
        if relative_path:
            full_url = f"{BASE_URL}{relative_path}"
            logger.info(f"üåê –ü–æ–ª–Ω—ã–π URL: {full_url}")
            return full_url
        else:
            logger.error("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            return None

    except Exception as e:
        logger.error(f"üíÄ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø—Ä–µ–≤—å—é: {e}")
        return None
