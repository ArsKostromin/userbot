import os
import asyncio
import logging
from PIL import Image
from lottie import importers
from lottie.exporters import exporters

logger = logging.getLogger(__name__)

# –ü–∞–ø–∫–∞ –¥–ª—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤
MEDIA_ROOT = "/app/media"

async def download_and_convert_image(client, document, slug: str) -> str | None:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç TGS-—Å—Ç–∏–∫–µ—Ä –∏–∑ Telegram, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –≤ GIF —á–µ—Ä–µ–∑ lottie,
    –∑–∞—Ç–µ–º –±–µ—Ä—ë—Ç –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä GIF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–∫ JPEG.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ JPEG –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    if not document or not slug:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ slug, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é.")
        return None

    os.makedirs(MEDIA_ROOT, exist_ok=True)

    temp_tgs_path = os.path.join(MEDIA_ROOT, f"{slug}.tgs")
    temp_gif_path = os.path.join(MEDIA_ROOT, f"{slug}.gif")
    final_jpeg_path = os.path.join(MEDIA_ROOT, f"{slug}.jpeg")
    relative_url = f"/media/{slug}.jpeg"

    try:
        # --- –®–∞–≥ 1: –°–∫–∞—á–∏–≤–∞–µ–º TGS ---
        logger.info(f"üìÅ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –≤ {temp_tgs_path}...")
        await client.download_media(document, file=temp_tgs_path)

        loop = asyncio.get_running_loop()

        # --- –®–∞–≥ 2: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TGS ‚Üí GIF ---
        def convert_tgs_to_gif():
            logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {temp_tgs_path} –≤ GIF {temp_gif_path}...")
            anim = importers.tgs.import_tgs(temp_tgs_path)  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TGS –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é
            exporters.gif.export_gif(anim, temp_gif_path)   # —Å–æ—Ö—Ä–∞–Ω—è–µ–º GIF

        await loop.run_in_executor(None, convert_tgs_to_gif)

        # --- –®–∞–≥ 3: –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä GIF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPEG ---
        def gif_to_jpeg():
            logger.info(f"üñºÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ GIF –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ {final_jpeg_path}...")
            with Image.open(temp_gif_path) as img:
                img.seek(0)  # –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä
                img.convert("RGB").save(final_jpeg_path, "JPEG")  # JPEG –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å

        await loop.run_in_executor(None, gif_to_jpeg)

        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {final_jpeg_path}")
        return relative_url

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

    finally:
        # --- –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ---
        for f in [temp_tgs_path, temp_gif_path]:
            if os.path.exists(f):
                os.remove(f)
