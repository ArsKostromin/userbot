import os
import asyncio
import logging
from PIL import Image

logger = logging.getLogger(__name__)
MEDIA_ROOT = "/app/media"


async def run_bash_command(cmd: str) -> bool:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç bash-–∫–æ–º–∞–Ω–¥—É –∏ –∂–¥–µ—Ç –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º shell=True –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞, –Ω–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å list-—Ñ–æ—Ä–º—É.
    proc = await asyncio.create_subprocess_shell(
        cmd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await proc.communicate()

    if proc.returncode != 0:
        logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{cmd}' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π {proc.returncode}")
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 512 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä–æ–º–æ–∂–¥–∞—Ç—å –ª–æ–≥
        logger.error(f"   STDOUT: {stdout.decode('utf-8', 'ignore')[:512]}...")
        logger.error(f"   STDERR: {stderr.decode('utf-8', 'ignore')[:512]}...")
        return False
    
    logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{cmd}' —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    return True


async def download_and_convert_image(client, document, slug: str) -> str | None:
    """
    –°–∫–∞—á–∏–≤–∞–µ–º TGS, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤ PNG —Å –ø–æ–º–æ—â—å—é tgs-converter (–≤–Ω–µ—à–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç),
    –∞ –∑–∞—Ç–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PNG –≤ JPEG —Å –ø–æ–º–æ—â—å—é Pillow.
    """
    if not document or not slug:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ slug, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return None

    os.makedirs(MEDIA_ROOT, exist_ok=True)
    tgs_path = os.path.join(MEDIA_ROOT, f"{slug}.tgs")
    temp_png_path = os.path.join(MEDIA_ROOT, f"{slug}.png")
    jpeg_path = os.path.join(MEDIA_ROOT, f"{slug}.jpeg")
    relative_url = f"/media/{slug}.jpeg"

    try:
        # 1. –°–∫–∞—á–∏–≤–∞–µ–º TGS
        logger.info(f"üìÅ –°–∫–∞—á–∏–≤–∞–µ–º TGS –≤ {tgs_path}...")
        await client.download_media(document, file=tgs_path)

        # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TGS –≤ PNG —Å –ø–æ–º–æ—â—å—é tgs-converter
        logger.info(f"üé® –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TGS –≤ PNG —á–µ—Ä–µ–∑ tgs-converter...")
        # tgs-converter -p (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä)
        # -o (–≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª)
        command = f"tgs-converter -p -o {temp_png_path} {tgs_path}"
        
        success = await run_bash_command(command)
        
        if not success or not os.path.exists(temp_png_path):
            raise Exception("–°–±–æ–π –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ tgs-converter –∏–ª–∏ —Ñ–∞–π–ª PNG –Ω–µ —Å–æ–∑–¥–∞–Ω.")
            
        # 3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PNG –≤ JPEG —Å –ø–æ–º–æ—â—å—é Pillow
        logger.info(f"üñºÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PNG –≤ JPEG —Å –ø–æ–º–æ—â—å—é Pillow...")
        
        def convert_png_to_jpeg():
            # –ó–∞–≥—Ä—É–∂–∞–µ–º PNG, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB (–¥–ª—è JPEG) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            with Image.open(temp_png_path) as img:
                img.convert('RGB').save(jpeg_path, 'jpeg')
                
        # Pillow - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_running_loop()
        await loop.run_in_executor(None, convert_png_to_jpeg)

        logger.info(f"‚úÖ JPEG –≥–æ—Ç–æ–≤: {jpeg_path}")
        return relative_url

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ TGS: {e}")
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏
            placeholder = Image.new("RGB", (512, 512), color=(200, 200, 200))
            placeholder.save(jpeg_path, "JPEG")
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É.")
            return relative_url
        except Exception as e2:
            logger.error(f"üíÄ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–ª—É—à–∫–∏: {e2}")
            return None
    finally:
        # 4. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(tgs_path):
            os.remove(tgs_path)
        if os.path.exists(temp_png_path):
            os.remove(temp_png_path)