import os
import asyncio
import logging
from PIL import Image

logger = logging.getLogger(__name__)
MEDIA_ROOT = "/app/media"
PLACEHOLDER_JPEG = os.path.join(MEDIA_ROOT, "placeholder.jpeg")  # –ø—É—Ç—å –∫ placeholder

async def download_and_convert_image(client, document, slug: str) -> str | None:
    """
    –°–∫–∞—á–∏–≤–∞–µ–º TGS, –Ω–æ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (lottie –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è),
    —Å—Ä–∞–∑—É –∫–ª–∞–¥—ë–º –∑–∞–≥–ª—É—à–∫—É JPEG –≤–º–µ—Å—Ç–æ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞.
    """
    if not document or not slug:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ slug, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return None

    os.makedirs(MEDIA_ROOT, exist_ok=True)

    jpeg_path = os.path.join(MEDIA_ROOT, f"{slug}.jpeg")
    relative_url = f"/media/{slug}.jpeg"

    try:
        logger.info(f"üìÅ –°–∫–∞—á–∏–≤–∞–µ–º TGS –≤ {MEDIA_ROOT}/{slug}.tgs (–Ω–æ –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º)...")
        await client.download_media(document, file=os.path.join(MEDIA_ROOT, f"{slug}.tgs"))

        # --- –°–æ–∑–¥–∞—ë–º placeholder, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ---
        if not os.path.exists(PLACEHOLDER_JPEG):
            logger.info("üñºÔ∏è Placeholder –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º —Å–µ—Ä—ã–π –∫–≤–∞–¥—Ä–∞—Ç 512x512...")
            img = Image.new("RGB", (512, 512), color=(200, 200, 200))
            img.save(PLACEHOLDER_JPEG, "JPEG")

        # --- –ö–æ–ø–∏—Ä—É–µ–º placeholder –≤ –∏—Ç–æ–≥–æ–≤—ã–π JPEG ---
        with Image.open(PLACEHOLDER_JPEG) as img:
            img.convert("RGB").save(jpeg_path, "JPEG")

        logger.info(f"‚úÖ JPEG –≥–æ—Ç–æ–≤ (
