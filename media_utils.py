import os
import asyncio
import logging
from PIL import Image

# üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è python-lottie (v0.7.1)
# –§—É–Ω–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ lottie.parsers, –∞ –Ω–µ –≤ lottie.importers
from lottie.parsers.tgs import parse_tgs 
# –§—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ lottie.exporters.pillow
from lottie.exporters.pillow import export_single_frame

logger = logging.getLogger(__name__)
MEDIA_ROOT = "/app/media"


async def download_and_convert_image(client, document, slug: str) -> str | None:
    """
    –°–∫–∞—á–∏–≤–∞–µ–º TGS –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä –≤ JPEG —á–µ—Ä–µ–∑ python-lottie (MattBas).
    """
    if not document or not slug:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ slug, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return None

    os.makedirs(MEDIA_ROOT, exist_ok=True)
    tgs_path = os.path.join(MEDIA_ROOT, f"{slug}.tgs")
    jpeg_path = os.path.join(MEDIA_ROOT, f"{slug}.jpeg")
    relative_url = f"/media/{slug}.jpeg"

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Loop –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è run_in_executor
    loop = asyncio.get_running_loop() 

    try:
        # --- –°–∫–∞—á–∏–≤–∞–µ–º TGS ---
        logger.info(f"üìÅ –°–∫–∞—á–∏–≤–∞–µ–º TGS –≤ {tgs_path}...")
        await client.download_media(document, file=tgs_path)

        # --- –ó–∞–≥—Ä—É–∂–∞–µ–º TGS-–∞–Ω–∏–º–∞—Ü–∏—é ---
        logger.info("üé® –ó–∞–≥—Ä—É–∂–∞–µ–º TGS –≤ lottie-–∞–Ω–∏–º–∞—Ü–∏—é...")
        
        # Lottie-—Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –∏—Ö –≤ executor
        def load_and_parse():
            with open(tgs_path, "rb") as f:
                # üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º parse_tgs –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞. 
                # load_tgs –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π –≤ lottie.parsers.tgs
                return parse_tgs(f.read())
        
        animation = await loop.run_in_executor(None, load_and_parse)

        # --- –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä ---
        logger.info("üñºÔ∏è –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä...")
        
        # üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3 (–õ–æ–≥–∏—á–µ—Å–∫–æ–µ): Export Pillow —Ç—Ä–µ–±—É–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
        # –∏ –æ–±—ä–µ–∫—Ç–∞ Animation.
        await loop.run_in_executor(None, export_single_frame, animation, jpeg_path)

        logger.info(f"‚úÖ JPEG –≥–æ—Ç–æ–≤: {jpeg_path}")
        return relative_url

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ TGS: {e}")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Pillow –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏ (–æ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç)
            placeholder = Image.new("RGB", (512, 512), color=(200, 200, 200))
            placeholder.save(jpeg_path, "JPEG")
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É.")
            return relative_url
        except Exception as e2:
            logger.error(f"üíÄ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–ª—É—à–∫–∏: {e2}")
            return None
    finally:
        # 4. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π TGS —Ñ–∞–π–ª
        if os.path.exists(tgs_path):
            os.remove(tgs_path)