import os
import gzip
import json
import asyncio
import logging
from PIL import Image
from lottie import objects, parsers, exporters

logger = logging.getLogger(__name__)
MEDIA_ROOT = "/app/media"

async def download_and_convert_image(client, document, slug: str) -> str | None:
    """
    –°–∫–∞—á–∏–≤–∞–µ–º TGS –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä –≤ JPEG —á–µ—Ä–µ–∑ lottie.
    """
    if not document or not slug:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ slug, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return None

    os.makedirs(MEDIA_ROOT, exist_ok=True)
    tgs_path = os.path.join(MEDIA_ROOT, f"{slug}.tgs")
    jpeg_path = os.path.join(MEDIA_ROOT, f"{slug}.jpeg")
    relative_url = f"/media/{slug}.jpeg"

    try:
        # --- –°–∫–∞—á–∏–≤–∞–µ–º TGS ---
        logger.info(f"üìÅ –°–∫–∞—á–∏–≤–∞–µ–º TGS –≤ {tgs_path}...")
        await client.download_media(document, file=tgs_path)

        # --- –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º GZIP ---
        logger.info("üåÄ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º TGS (gzip ‚Üí JSON)...")
        with gzip.open(tgs_path, "rb") as f:
            data = json.load(f)

        # --- –ü–∞—Ä—Å–∏–º –≤ –æ–±—ä–µ–∫—Ç Lottie ---
        logger.info("üé® –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –≤ lottie-–∞–Ω–∏–º–∞—Ü–∏—é...")
        animation = parsers.tgs.parse_tgs(data)

        # --- –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä ---
        logger.info("üñºÔ∏è –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä...")
        exporters.pillow.export_single_frame(animation, jpeg_path)

        logger.info(f"‚úÖ JPEG –≥–æ—Ç–æ–≤: {jpeg_path}")
        return relative_url

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ TGS: {e}")
        # fallback –Ω–∞ –∑–∞–≥–ª—É—à–∫—É
        try:
            placeholder = Image.new("RGB", (512, 512), color=(200, 200, 200))
            placeholder.save(jpeg_path, "JPEG")
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É.")
            return relative_url
        except Exception as e2:
            logger.error(f"üíÄ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–ª—É—à–∫–∏: {e2}")
            return None
