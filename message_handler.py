import logging
import json
import requests
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç config, –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ
import config 
from telethon import utils

logger = logging.getLogger(__name__)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–≠–ö–ï–ù–î–ê ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ config
API_BASE_URL = config.API_BASE_URL
API_URL = f"{API_BASE_URL}/Inventory/adds-gift/"
AUTH_TOKEN = config.API_TOKEN

# üí° –¢–û–ß–ù–´–ï –ò–ú–ï–ù–ê –ê–¢–†–ò–ë–£–¢–û–í –ò–ó TELETHON, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–≤–ª–µ—á—å
ATTRIBUTE_MAPPINGS = {
    # –ö–ª—é—á - —ç—Ç–æ –∏–º—è –∞—Ç—Ä–∏–±—É—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ Django
    # –ó–Ω–∞—á–µ–Ω–∏–µ - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º–µ–Ω/—Ç–∏–ø–æ–≤ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏–∑ StarGift
    "backdrop": ["Backdrop"],
    "model": ["Model", "Shape"],
    "pattern": ["Pattern", "Texture"],
}

def parse_attributes(attributes):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∞—Ç—Ä–∏–±—É—Ç–æ–≤ NFT-–ø–æ–¥–∞—Ä–∫–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: backdrop, model, pattern –∏ —Ä–µ–¥–∫–æ—Å—Ç–∏ (permille).
    """
    result = {
        "backdrop_name": None,
        "model_name": None,
        "pattern_name": None,
        "backdrop_rarity_permille": None,
        "model_rarity_permille": None,
        "pattern_rarity_permille": None,
        "backdrop_original_details": None,
        "model_original_details": None,
        "pattern_original_details": None,
    }

    # –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞, –º—ã —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É
    reverse_map = {}
    for django_key, tg_names in ATTRIBUTE_MAPPINGS.items():
        for tg_name in tg_names:
            reverse_map[tg_name.lower()] = django_key

    for attr in attributes or []:
        name = getattr(attr, "name", None)
        rarity = getattr(attr, "rarity_permille", None)
        orig = getattr(attr, "original_details", None)
        
        orig_details = {
            "id": getattr(orig, "id", None),
            "type": getattr(orig, "type", None),
            "name": getattr(orig, "name", None),
        } if orig else None

        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –ø–æ–¥—Å—Ç—Ä–æ–∫—É
        django_key = reverse_map.get((name or "").lower())
        
        if django_key:
            result[f"{django_key}_name"] = name
            result[f"{django_key}_rarity_permille"] = rarity
            result[f"{django_key}_original_details"] = orig_details
            logger.debug(f"üéâ –ê—Ç—Ä–∏–±—É—Ç '{name}' —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω —Å –ø–æ–ª–µ–º '{django_key}'.")
        else:
            logger.debug(f"üîç –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç: {name}")

    return result


def extract_gift_data(action, message) -> dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∞—Ä–∫–µ –¥–ª—è GiftSerializer.
    """
    gift_info = getattr(action, 'gift', None)
    if not gift_info:
        logger.warning("‚ö†Ô∏è GiftInfo –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ action")
        return {}

    attributes = getattr(gift_info, 'attributes', [])
    attr_data = parse_attributes(attributes)

    # 1. –û—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏ –¥–∞–Ω–Ω—ã–µ
    # TG ID (—Å–ª—É–∂–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º, –∫–∞–∫ ton_contract_address)
    ton_address = getattr(gift_info, 'slug', None) or str(getattr(gift_info, 'id', ''))
    title = getattr(gift_info, 'title', 'Gift')
    slug = getattr(gift_info, 'slug', None)

    # 2. –¶–µ–Ω–∞ –∏ —Ä–µ–¥–∫–æ—Å—Ç—å
    rarity_level = getattr(getattr(gift_info, 'rarity_level', None), 'name', None)
    value_amount = getattr(gift_info, 'value_amount', None)
    price_ton = value_amount / 100 if value_amount else None
    
    # 3. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_url = None
    
    # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è Media –≤ message)
    if message and getattr(message, 'media', None) and getattr(message.media, 'document', None):
        doc_id = getattr(message.media.document, 'id', None)
        if doc_id:
            image_url = f"https://t.me/sticker/{doc_id}"
            logger.debug(f"üñº Image URL (Media Document): {image_url}")

    # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–∞–º–æ–º –æ–±—ä–µ–∫—Ç–µ –ø–æ–¥–∞—Ä–∫–∞ (—á–∞—â–µ –≤—Å–µ–≥–æ –∑–¥–µ—Å—å)
    if not image_url and getattr(gift_info, 'document', None):
        doc = gift_info.document
        if getattr(doc, 'id', None):
            image_url = f"https://t.me/sticker/{doc.id}"
            logger.debug(f"üñº Image URL (Gift Document): {image_url}")
            
    # –ü–æ–∏—Å–∫ –ø–æ URL (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if not image_url:
         image_url = getattr(gift_info, 'media_url', None) or getattr(gift_info, 'thumb_url', None)
         if image_url:
              logger.debug(f"üñº Image URL (Media/Thumb URL): {image_url}")

    if not image_url:
        image_url = "https://cdn-icons-png.flaticon.com/512/3989/3989685.png"
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ–∞–ª—å–Ω—ã–π image_url. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞.")

    # --- –°–±–æ—Ä –∏—Ç–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
    gift_data = {
        # –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ Django –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞/—Å–æ–∑–¥–∞–Ω–∏—è
        "ton_contract_address": ton_address,
        "name": title,
        "symbol": slug,
        "image_url": image_url,
        "price_ton": price_ton,
        "rarity_level": rarity_level,
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
        "backdrop": attr_data.get("backdrop_name"), 
        
        # –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏ –¥–µ—Ç–∞–ª—è—Ö
        **attr_data 
    }

    # --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ–∫–∞–µ–º—ã—Ö –ø–æ–ª–µ–π ---
    logger.info("--- üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è NFT ---")
    log_data = {k: v for k, v in gift_data.items() if k not in attr_data and v is not None}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è/—á–∞—Ç–∞ (–æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ kwargs, –∞ –Ω–µ –∏–∑ action)
    log_data.update({
         "telegram_sender_id": message.sender_id,
         "telegram_chat_id": message.chat_id,
    })
    
    logger.info(json.dumps(log_data, indent=4, ensure_ascii=False))
    logger.info("--- ----------------------- ---")


    # –£–±–∏—Ä–∞–µ–º None –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    return {k: v for k, v in gift_data.items() if v is not None}


async def send_to_django_backend(gift_data: dict):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ Django API.
    """
    # ... (–ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ)

    if not API_URL:
        logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è API_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ config.py). –ü—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É.")
        return

    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Token {AUTH_TOKEN}' if AUTH_TOKEN else '',
    }
    
    # NOTE: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'user' –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è/—á–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ gift_data 
    # –≤ handle_star_gift, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–∑—ã–≤–∞—Ç—å send_to_django_backend.
    
    try:
        logger.info("=== üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Django API ===")
        logger.info(f"URL: {API_URL}")
        logger.debug(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:\n{json.dumps(gift_data, indent=4, ensure_ascii=False)}")
        
        response = requests.post(API_URL, json=gift_data, headers=headers, timeout=10)

        if 200 <= response.status_code < 300:
            logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            logger.debug(f"–û—Ç–≤–µ—Ç Django:\n{response.text}")
        else:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Django!")
            logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n{response.text}")

        response.raise_for_status()

    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ POST {API_URL}: {e}")
        logger.debug(f"–ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{json.dumps(gift_data, indent=4, ensure_ascii=False)}")


async def handle_star_gift(message, client, **kwargs):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è MessageActionStarGiftUnique.
    """
    action = getattr(message, 'action', None)
    if not action or type(action).__name__ != 'MessageActionStarGiftUnique':
        return

    sender_id = getattr(message.sender, 'id', None)
    sender_name = utils.get_display_name(message.sender)
    
    # üí° –ü–æ–ª—É—á–∞–µ–º chat_entity —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (—É–∂–µ –Ω–µ –Ω—É–∂–Ω–æ, —Ç.–∫. message.chat_id –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
    chat_name = utils.get_display_name(await message.get_chat()) if message.chat_id else "Unknown Chat"

    logger.warning(f"üéÅ –ù–∞–π–¥–µ–Ω Star Gift –≤ MSG_ID: {message.id} –æ—Ç {sender_name} ({sender_id}) –≤ —á–∞—Ç–µ '{chat_name}'")

    # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ message, —Ç–∞–∫ –∫–∞–∫ extract_gift_data –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
    gift_data = extract_gift_data(action, message=message)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è/—á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –±—ç–∫–µ–Ω–¥–∞ (user, sender_id –∏ —Ç.–¥.)
    gift_data.update({
        "user": sender_id, # –ï—Å–ª–∏ –≤–∞—à Django –∏—Å–ø–æ–ª—å–∑—É–µ—Ç sender_id –∫–∞–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "telegram_sender_id": sender_id,
        "telegram_sender_name": sender_name,
        "telegram_chat_name": chat_name,
    })


    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–≤–∫–ª—é—á–∞—è –∞—Ç—Ä–∏–±—É—Ç—ã)
    logger.info("--- üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è GiftSerializer (JSON-—Ñ–æ—Ä–º–∞—Ç, –ø–æ–ª–Ω—ã–µ) ---")
    print(json.dumps(gift_data, indent=4, ensure_ascii=False))
    logger.info("--------------------------------------------------")

    if gift_data:
        await send_to_django_backend(gift_data)