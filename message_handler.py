import logging
import json
import requests
import config
from telethon import utils
from gift_processor import extract_gift_data

logger = logging.getLogger(__name__)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–≠–ö–ï–ù–î–ê ---
API_BASE_URL = config.API_BASE_URL
API_URL = f"{API_BASE_URL}/Inventory/adds-gift/"
AUTH_TOKEN = config.API_TOKEN


def get_attribute_details(gift_info_attributes: list, name: str) -> dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è, permille –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∞—Ç—Ä–∏–±—É—Ç–∞ (–º–æ–¥–µ–ª—å, —Ñ–æ–Ω, —É–∑–æ—Ä).
    """
    attr_data = {
        'name': None,
        'rarity_permille': None,
        'original_details': None
    }

    target_attr = next((attr for attr in gift_info_attributes if getattr(attr, 'name', None) == name), None)

    if target_attr:
        attr_data['name'] = getattr(target_attr, 'name', None)
        attr_data['rarity_permille'] = getattr(target_attr, 'rarity_permille', None)

        original_details = getattr(target_attr, 'original_details', None)
        if original_details:
            attr_data['original_details'] = {
                'id': getattr(original_details, 'id', None),
                'type': getattr(original_details, 'type', None),
                'name': getattr(original_details, 'name', None),
            }
    return attr_data


async def send_to_django_backend(gift_data: dict):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ Django API.
    """
    if not API_URL:
        logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DJANGO_GIFT_WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É.")
        return

    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Token {AUTH_TOKEN}' if AUTH_TOKEN else '',
    }

    try:
        logger.info("=== üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Django API ===")
        logger.info(f"URL: {API_URL}")
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
        logger.info(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:\n{json.dumps(gift_data, indent=4, ensure_ascii=False)}")
        logger.info("=======================================")

        response = requests.post(API_URL, json=gift_data, headers=headers, timeout=10)

        if 200 <= response.status_code < 300:
            logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            logger.debug(f"–û—Ç–≤–µ—Ç Django:\n{response.text}")
        else:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Django!")
            logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n{response.text}")

        response.raise_for_status()

    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ POST {API_URL}: {e}")
        logger.debug(f"–ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{json.dumps(gift_data, indent=4, ensure_ascii=False)}")


async def handle_star_gift(message, client, **kwargs):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è MessageActionStarGiftUnique.
    """
    action = getattr(message, 'action', None)
    if not action or type(action).__name__ != 'MessageActionStarGiftUnique':
        return

    sender_id = getattr(message.sender, 'id', None)
    sender_name = utils.get_display_name(message.sender)
    chat_entity = await client.get_entity(message.chat_id)
    chat_name = utils.get_display_name(chat_entity)

    logger.warning(f"üéÅ –ù–∞–π–¥–µ–Ω Star Gift –≤ MSG_ID: {message.id} –æ—Ç {sender_name} ({sender_id}) –≤ —á–∞—Ç–µ '{chat_name}'")

    gift_data = extract_gift_data(
        action,
        message  # –ø–µ—Ä–µ–¥–∞—ë–º –≤–µ—Å—å message
    )

    logger.info("--- üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è GiftSerializer (JSON-—Ñ–æ—Ä–º–∞—Ç) ---")
    print(json.dumps(gift_data, indent=4, ensure_ascii=False))
    logger.info("--------------------------------------------------")

    if gift_data:
        await send_to_django_backend(gift_data)
