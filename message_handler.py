import logging
import json
import requests
import config
from telethon import utils

logger = logging.getLogger(__name__)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–≠–ö–ï–ù–î–ê ---
API_BASE_URL = getattr(config, 'API_BASE_URL', None)
API_URL = f"{API_BASE_URL}/Inventory/adds-gift/" if API_BASE_URL else None
AUTH_TOKEN = getattr(config, 'API_TOKEN', None)


def extract_gift_data(action, message) -> dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∞—Ä–∫–µ, –æ–ø—Ä–µ–¥–µ–ª—è—è –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ –∏—Ö —Ç–∏–ø—É.
    """
    gift_info = getattr(action, 'gift', None)
    if not gift_info:
        logger.warning("‚ö†Ô∏è –û–±—ä–µ–∫—Ç 'gift' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ action, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return {}

    # --- 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (Model, Pattern, Backdrop) –ø–æ —Ç–∏–ø—É –æ–±—ä–µ–∫—Ç–∞ ---
    attributes = getattr(gift_info, 'attributes', [])
    
    model_attr = next((attr for attr in attributes if type(attr).__name__ == 'StarGiftAttributeModel'), None)
    pattern_attr = next((attr for attr in attributes if type(attr).__name__ == 'StarGiftAttributePattern'), None)
    backdrop_attr = next((attr for attr in attributes if type(attr).__name__ == 'StarGiftAttributeBackdrop'), None)

    def get_details(attr_obj):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞."""
        if not attr_obj:
            return None, None, None
        
        name = getattr(attr_obj, 'name', None)
        rarity = getattr(attr_obj, 'rarity_permille', None)
        orig = getattr(attr_obj, 'original_details', None)
        
        orig_details = {
            "id": getattr(orig, "id", None),
            "type": getattr(orig, "type", None),
            "name": getattr(orig, "name", None),
        } if orig else None
        
        return name, rarity, orig_details

    model_name, model_rarity, model_orig = get_details(model_attr)
    pattern_name, pattern_rarity, pattern_orig = get_details(pattern_attr)
    backdrop_name, backdrop_rarity, backdrop_orig = get_details(backdrop_attr)

    # --- 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∞—Ä–∫–µ ---
    ton_address = getattr(gift_info, 'slug', None) or str(getattr(gift_info, 'id', ''))
    title = getattr(gift_info, 'title', 'Gift')
    slug = getattr(gift_info, 'slug', None)
    
    # ID —Å–∞–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–¥–∞—Ä–∫–∞
    gift_id_tg = getattr(gift_info, 'id', None)
    
    # –¶–µ–Ω–∞ –∏ –æ–±—â–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å
    rarity_level = getattr(getattr(gift_info, 'rarity_level', None), 'name', None)
    value_amount = getattr(gift_info, 'value_amount', None)
    price_ton = value_amount / 100 if value_amount else None

    # --- 3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ Image URL ---
    image_url = None
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—â–µ –≤—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –ú–æ–¥–µ–ª–∏
    if model_attr and getattr(model_attr, 'document', None):
        doc_id = getattr(model_attr.document, 'id', None)
        if doc_id:
            image_url = f"https://t.me/sticker/{doc_id}"
            logger.debug(f"üñº Image URL –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ –ú–æ–¥–µ–ª–∏: {image_url}")
    
    if not image_url:
        image_url = "https://cdn-icons-png.flaticon.com/512/3989/3989685.png"
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ–∞–ª—å–Ω—ã–π image_url. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞.")

    # --- 4. –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è ---
    gift_data = {
        "id": gift_id_tg,
        "ton_contract_address": ton_address,
        "name": title,
        "image_url": image_url,
        "price_ton": price_ton,
        "backdrop": backdrop_name, # <-- –≠—Ç–æ –ø–æ–ª–µ –¥—É–±–ª–∏—Ä—É–µ—Ç backdrop_name, –Ω–æ –æ—Å—Ç–∞–≤–ª—è—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ
        "symbol": slug,
        "model_name": model_name,
        "pattern_name": pattern_name,
        "model_rarity_permille": model_rarity,
        "pattern_rarity_permille": pattern_rarity,
        "backdrop_rarity_permille": backdrop_rarity,
        "model_original_details": model_orig,
        "pattern_original_details": pattern_orig,
        "backdrop_original_details": backdrop_orig,
        "rarity_level": rarity_level,
        "backdrop_name": backdrop_name,
    }

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, –æ—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    return {k: v for k, v in gift_data.items() if v is not None}


async def send_to_django_backend(gift_data: dict):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ Django API.
    """
    if not API_URL:
        logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è API_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ config.py). –ü—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É.")
        return

    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Token {AUTH_TOKEN}' if AUTH_TOKEN else '',
    }
    
    try:
        logger.info("=== üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Django API ===")
        logger.info(f"URL: {API_URL}")
        logger.debug(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:\n{json.dumps(gift_data, indent=4, ensure_ascii=False)}")
        
        response = requests.post(API_URL, json=gift_data, headers=headers, timeout=10)

        if 200 <= response.status_code < 300:
            logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            logger.debug(f"–û—Ç–≤–µ—Ç Django:\n{response.text}")
        else:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Django!")
            logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n{response.text}")

        response.raise_for_status()

    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ POST {API_URL}: {e}")
        logger.debug(f"–ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{json.dumps(gift_data, indent=4, ensure_ascii=False)}")


async def handle_star_gift(message, client, **kwargs):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è MessageActionStarGiftUnique.
    """
    action = getattr(message, 'action', None)
    if not action or type(action).__name__ != 'MessageActionStarGiftUnique':
        return

    sender_id = getattr(message.sender, 'id', None)
    sender_name = utils.get_display_name(message.sender)
    chat_name = utils.get_display_name(await message.get_chat()) if message.chat_id else "Unknown Chat"

    logger.warning(f"üéÅ –ù–∞–π–¥–µ–Ω Star Gift –≤ MSG_ID: {message.id} –æ—Ç {sender_name} ({sender_id}) –≤ —á–∞—Ç–µ '{chat_name}'")

    # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∞—Ä–∫–µ
    gift_data = extract_gift_data(action, message=message)
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è/—á–∞—Ç–∞ –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å
    gift_data.update({
        "user": sender_id, # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—é "user" –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ
    })

    # 3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
    logger.info("--- üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è GiftSerializer (JSON-—Ñ–æ—Ä–º–∞—Ç, –ø–æ–ª–Ω—ã–µ) ---")
    logger.info(json.dumps(gift_data, indent=4, ensure_ascii=False))
    logger.info("--------------------------------------------------")

    if gift_data:
        await send_to_django_backend(gift_data)
        