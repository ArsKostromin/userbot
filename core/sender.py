# core/sender.py
import logging
from telethon import types, errors
from telethon.tl import custom

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


async def send_snakebox_gift(client, recipient_id: int, recipient_hash: int, gift_msg_id: int):
    """
    –ü–µ—Ä–µ–¥–∞—ë—Ç –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ raw MTProto –≤—ã–∑–æ–≤ (TransferStarGift),
    –¥–∞–∂–µ –µ—Å–ª–∏ Telethon –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞.
    """
    logger.info("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è—é raw-MTProto –∑–∞–ø—Ä–æ—Å payments.transferStarGift (raw) ...")

    # –†—É—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (API ID = 0xdeadbeef ‚Äî —Ñ–µ–π–∫, –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    body = {
        "_": "payments.transferStarGift",
        "stargift": {
            "_": "inputSavedStarGiftUser",
            "msg_id": gift_msg_id
        },
        "to_id": {
            "_": "inputPeerUser",
            "user_id": recipient_id,
            "access_hash": recipient_hash
        }
    }

    try:
        result = await client._call(body)
        logger.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω (—á–µ—Ä–µ–∑ raw invoke)!")
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Telegram: {result}")
        return result

    except errors.BadRequestError as e:
        msg = str(e)
        if "PAYMENT_REQUIRED" in msg:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars (PAYMENT_REQUIRED)")
        elif "STARGIFT_NOT_FOUND" in msg:
            logger.error("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        elif "PEER_ID_INVALID" in msg:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id / access_hash")
        else:
            logger.exception(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram API: {msg}")

    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ raw-–≤—ã–∑–æ–≤–µ: {e}")
