# core/sender.py
import logging
from telethon import functions, types, errors
from telethon.tl.tlobject import TLObject

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


class InputPaymentCredentialsStars(TLObject):
    """
    –†—É—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è TL-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:
    inputPaymentCredentialsStars#bbf2dda0 = InputPaymentCredentials;
    """
    CONSTRUCTOR_ID = 0xbbf2dda0
    SUBCLASS_OF_ID = 0x3417d728  # –æ–±—â–∏–π ID InputPaymentCredentials

    def __init__(self):
        pass

    def to_dict(self):
        """–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç TL-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        return {"_": "inputPaymentCredentialsStars"}

    def _bytes(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 4 –±–∞–π—Ç–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ (raw MTProto)"""
        return self.CONSTRUCTOR_ID.to_bytes(4, "little")


async def send_snakebox_gift(client, recipient_id: int, recipient_hash: int, gift_msg_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ MTProto.
    –®–∞–≥–∏:
      1. –ü—Ä–æ–±—É–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É (payments.transferStarGift)
      2. –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞, –ø–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ä–º—É (payments.getPaymentForm)
      3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–ª–∞—Ç—É —Å inputPaymentCredentialsStars
    """

    logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –æ–ø–ª–∞—Ç—É...")

    try:
        # ü•á –ü–æ–ø—ã—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        try:
            result = await client(functions.payments.TransferStarGiftRequest(
                stargift=types.InputSavedStarGiftUser(msg_id=gift_msg_id),
                to_id=types.InputPeerUser(
                    user_id=recipient_id,
                    access_hash=recipient_hash
                )
            ))
            logger.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –±–µ–∑ –æ–ø–ª–∞—Ç—ã!")
            return result

        except errors.RPCError as e:
            if "PAYMENT_REQUIRED" not in str(e):
                raise
            logger.warning("üí∏ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏ ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–≤–æ–π—Å...")

        # ü•à –§–æ—Ä–º–∏—Ä—É–µ–º invoice –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
        invoice = types.InputInvoiceStarGiftTransfer(
            stargift=types.InputSavedStarGiftUser(msg_id=gift_msg_id),
            to_id=types.InputPeerUser(
                user_id=recipient_id,
                access_hash=recipient_hash
            )
        )

        # ü•â –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã
        form = await client(functions.payments.GetPaymentFormRequest(
            invoice=invoice
        ))

        if not hasattr(form, "form_id"):
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å form_id (—Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –ø—É—Å—Ç–∞—è)")

        logger.info(f"üßæ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã #{form.form_id} | –í–∞–ª—é—Ç–∞: {form.invoice.currency}")

        # üß† –°–æ–∑–¥–∞—ë–º TL-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è Stars
        creds = InputPaymentCredentialsStars()

        # üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã
        result = await client(functions.payments.SendPaymentFormRequest(
            form_id=form.form_id,
            invoice=invoice,
            credentials=creds
        ))

        logger.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω!")
        logger.info(f"–û—Ç–≤–µ—Ç Telegram: {result}")
        return result

    except errors.RPCError as e:
        logger.error(f"‚ùå RPC –æ—à–∏–±–∫–∞: {e.__class__.__name__} ‚Äî {e}")
    except Exception as e:
        logger.exception(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")

    return None
