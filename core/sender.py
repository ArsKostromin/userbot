# core/sender.py
import logging
from telethon import functions, types, errors
from telethon.tl.tlobject import TLObject

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


class InputPaymentCredentialsStars(TLObject):
    """
    TL-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:
    inputPaymentCredentialsStars#bbf2dda0 flags:int = InputPaymentCredentials;
    """
    CONSTRUCTOR_ID = 0xbbf2dda0
    SUBCLASS_OF_ID = 0x3417d728

    def __init__(self, flags: int = 0):
        self.flags = flags

    def to_dict(self):
        return {"_": "inputPaymentCredentialsStars", "flags": self.flags}

    def _bytes(self):
        return self.CONSTRUCTOR_ID.to_bytes(4, "little") + self.flags.to_bytes(4, "little")


async def send_snakebox_gift(client, recipient_id: int, recipient_hash: int, gift_msg_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ —á–µ—Ä–µ–∑ MTProto (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–≤—ë–∑–¥).
    –ï—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ —Ç—Ä–µ–±—É–µ—Ç –æ–ø–ª–∞—Ç—É ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç invoice –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É.
    """
    logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –æ–ø–ª–∞—Ç—É...")

    try:
        # 1Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
        try:
            result = await client(functions.payments.TransferStarGiftRequest(
                stargift=types.InputSavedStarGiftUser(msg_id=gift_msg_id),
                to_id=types.InputPeerUser(user_id=recipient_id, access_hash=recipient_hash)
            ))
            logger.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –æ–ø–ª–∞—Ç—ã!")
            return result

        except errors.RPCError as e:
            if "PAYMENT_REQUIRED" not in str(e):
                raise
            logger.warning("üí∏ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º invoice...")

        # 2Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º invoice
        invoice = types.InputInvoiceStarGiftTransfer(
            stargift=types.InputSavedStarGiftUser(msg_id=gift_msg_id),
            to_id=types.InputPeerUser(user_id=recipient_id, access_hash=recipient_hash)
        )

        # 3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã
        form = await client(functions.payments.GetPaymentFormRequest(invoice=invoice))

        if not hasattr(form, "form_id"):
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å form_id –¥–ª—è –æ–ø–ª–∞—Ç—ã")

        logger.info(f"üßæ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã #{form.form_id} | –í–∞–ª—é—Ç–∞: {form.invoice.currency}")

        # 4Ô∏è‚É£ –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É (Telegram invoice deep link)
        slug = getattr(form, "slug", None)
        if slug:
            pay_url = f"https://t.me/star?startapp=pay_{slug}"
            logger.info(f"üí´ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–≤—ë–∑–¥–∞–º–∏: {pay_url}")
        else:
            # —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: tg://invoice/<slug> ‚Äî —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            pay_url = f"tg://invoice/{form.form_id}"
            logger.info(f"üí´ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É (tg://): {pay_url}")
            logger.info(f"https://t.me/openinvoice?form={form.form_id}")

        logger.info("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –æ–Ω —Å–∞–º –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–∞—Ä–æ–∫!")

        # 5Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–Ω–µ—à–Ω–µ–π –ª–æ–≥–∏–∫–∏ (–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î)
        return {
            "status": "payment_required",
            "form_id": form.form_id,
            "slug": slug,
            "pay_url": pay_url,
            "currency": form.invoice.currency
        }

    except errors.RPCError as e:
        logger.error(f"‚ùå RPC –æ—à–∏–±–∫–∞: {e.__class__.__name__} ‚Äî {e}")
    except Exception as e:
        logger.exception(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")

    return None
