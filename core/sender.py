# core/sender.py
import logging
from telethon import functions, types, errors
from telethon.tl.tlobject import TLObject  # ‚ÄºÔ∏è –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


# ‚ÄºÔ∏è ‚ÄºÔ∏è ‚ÄºÔ∏è
# –í–ï–†–ù–ò –≠–¢–û–¢ –ö–õ–ê–°–° –û–ë–†–ê–¢–ù–û
# (–¢–∞–∫ –∫–∞–∫ –≤ telethon 1.41.2 –µ–≥–æ –Ω–µ—Ç –≤ 'types')
# ‚ÄºÔ∏è ‚ÄºÔ∏è ‚ÄºÔ∏è
class InputPaymentCredentialsStars(TLObject):
    """
    TL-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:
    inputPaymentCredentialsStars#bbf2dda0 flags:int = InputPaymentCredentials;
    """
    CONSTRUCTOR_ID = 0xbbf2dda0
    SUBCLASS_OF_ID = 0x3417d728  # InputPaymentCredentials

    def __init__(self, flags: int = 0):
        # –í TL-—Å—Ö–µ–º–µ —É –Ω–µ–≥–æ –Ω–µ—Ç —Ñ–ª–∞–≥–æ–≤, –Ω–æ –≤ RPC-–æ—Ç–≤–µ—Ç–µ –æ—Ç Telegram
        # (–≤ 'form') –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏. 
        # –û—Å—Ç–∞–≤–∏–º flags=0, –∫–∞–∫ —Ç—ã –∏ –¥–µ–ª–∞–ª, —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ.
        self.flags = flags

    def to_dict(self):
        return {"_": "inputPaymentCredentialsStars", "flags": self.flags}

    def _bytes(self):
        # 4 –±–∞–π—Ç–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ + 4 –±–∞–π—Ç–∞ —Ñ–ª–∞–≥–æ–≤
        return self.CONSTRUCTOR_ID.to_bytes(4, "little") + self.flags.to_bytes(4, "little")


async def send_snakebox_gift(client, recipient_id: int, recipient_hash: int, gift_msg_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ —á–µ—Ä–µ–∑ MTProto (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–ø–ª–∞—Ç—ã –∑–≤—ë–∑–¥–∞–º–∏).
    """
    logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –æ–ø–ª–∞—Ç—É...")

    try:
        # 1Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
        try:
            result = await client(functions.payments.TransferStarGiftRequest(
                stargift=types.InputSavedStarGiftUser(msg_id=gift_msg_id),
                to_id=types.InputPeerUser(user_id=recipient_id, access_hash=recipient_hash)
            ))
            logger.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–∫–∞–∫ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π)!")
            return result

        except errors.RPCError as e:
            if "PAYMENT_REQUIRED" not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ 1 (Transfer): {e}")
                raise
            logger.warning("üí∏ –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ '–≤—ã–∏–≥—Ä–∞–Ω'. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ –∑–∞ XTR ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–≤–æ–π—Å...")

        # 2Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º invoice –Ω–∞ –ü–û–ö–£–ü–ö–£ –ø–æ–¥–∞—Ä–∫–∞
        invoice = types.InputInvoiceStarGiftTransfer(
            stargift=types.InputSavedStarGiftUser(msg_id=gift_msg_id),
            to_id=types.InputPeerUser(user_id=recipient_id, access_hash=recipient_hash)
        )

        # 3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã
        form = await client(functions.payments.GetPaymentFormRequest(invoice=invoice))
        if not hasattr(form, "form_id"):
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å form_id –¥–ª—è –æ–ø–ª–∞—Ç—ã")

        logger.info(f"üßæ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã #{form.form_id} | –í–∞–ª—é—Ç–∞: {form.invoice.currency}")

        # 4Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TL-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        #
        # ‚ÄºÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–í–û–ô –∫–ª–∞—Å—Å, –∞ –Ω–µ types.
        #
        creds = InputPaymentCredentialsStars(flags=0)

        # 5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã
        logger.info("üí≥ –ü—ã—Ç–∞–µ–º—Å—è –æ–ø–ª–∞—Ç–∏—Ç—å —Ñ–æ—Ä–º—É —Å –ø–æ–º–æ—â—å—é XTR...")
        result = await client(functions.payments.SendPaymentFormRequest(
            form_id=form.form_id,
            invoice=invoice,
            credentials=creds  # <-- –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Ç–≤–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å
        ))

        logger.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω –∑–≤—ë–∑–¥–∞–º–∏ (XTR) –∏ –ø–µ—Ä–µ–¥–∞–Ω!")
        logger.info(f"–û—Ç–≤–µ—Ç Telegram: {result}")
        return result

    except errors.RPCError as e:
        if "FORM_UNSUPPORTED" in str(e):
            logger.critical("‚ùå‚ùå‚ùå –û–®–ò–ë–ö–ê: FORM_UNSUPPORTED ‚ùå‚ùå‚ùå")
            logger.critical("–≠—Ç–æ –ø–æ—á—Ç–∏ 100% –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É –∞–∫–∫–∞—É–Ω—Ç–∞ —é–∑–µ—Ä–±–æ—Ç–∞ –ù–ï–¢ –ó–í–Å–ó–î (XTR) –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            logger.critical("–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ @PremiumBot) –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            logger.error(f"‚ùå RPC –æ—à–∏–±–∫–∞: {e.__class__.__name__} ‚Äî {e}")
    except AttributeError as e:
        logger.error(f"‚ùå AttributeError (–≤–µ—Ä–æ—è—Ç–Ω–æ, –æ—à–∏–±–∫–∞ –≤ –∏–º–ø–æ—Ä—Ç–µ): {e}")
    except Exception as e:
        logger.exception(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")

    return None