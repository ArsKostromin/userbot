import asyncio
import logging
from telethon.tl.functions.messages import SendMediaRequest
from telethon.tl.types import InputPeerUser, InputMediaPhotoExternal, InputMessageEntityTextUrl

logger = logging.getLogger(__name__)

async def send_gift_once(client):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é jhgvcbcg.
    """
    try:
        # --- –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ---
        user_id = 1207534564
        access_hash = -8813161918532140746
        username = "jhgvcbcg"

        # --- –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∞—Ä–∫–µ ---
        gift_data = {
            "id": 5852757491946882427,
            "name": "Snake Box",
            "symbol": "SnakeBox-29826",
            "price_ton": 472.0,
            "image_url": "https://nft.fragment.com/gift/SnakeBox-29826.medium.jpg",
            "description": "NFT –ø–æ–¥–∞—Ä–æ–∫ Snake Box (–º–æ–¥–µ–ª—å Purple, —É–∑–æ—Ä Spades, —Ñ–æ–Ω Azure Blue)"
        }

        # --- —Å–æ–∑–¥–∞—ë–º peer ---
        peer = InputPeerUser(user_id=user_id, access_hash=access_hash)

        # --- —Å–æ–∑–¥–∞—ë–º –º–µ–¥–∏–∞ –æ–±—ä–µ–∫—Ç (–∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ URL –∫–∞—Ä—Ç–∏–Ω–∫–∏) ---
        media = InputMediaPhotoExternal(
            url=gift_data["image_url"]
        )

        # --- —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ---
        message_text = (
            f"üéÅ –¢–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫, @{username}!\n\n"
            f"{gift_data['name']} ({gift_data['symbol']})\n"
            f"üíé {gift_data['price_ton']} TON\n\n"
            f"{gift_data['description']}"
        )

        # --- –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ NFT ---
        entities = [
            InputMessageEntityTextUrl(
                offset=0,
                length=2,  # –¥–ª—è —Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞ [üéÅ]
                url=f"https://fragment.com/nft/{gift_data['symbol']}"
            )
        ]

        # --- –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ---
        await client(SendMediaRequest(
            peer=peer,
            media=media,
            message=message_text,
            entities=entities,
            random_id=client.rnd_id()
        ))

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} ({user_id})")

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")
