import logging
from telethon import functions, types, errors
from telethon.tl import TLObject

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


class InputPaymentCredentialsStars(TLObject):
    """
    TL-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:
    inputPaymentCredentialsStars#bbf2dda0 = InputPaymentCredentials;
    """
    CONSTRUCTOR_ID = 0xbbf2dda0
    SUBCLASS_OF_ID = 0x3417d728  # –æ–±—â–∏–π ID –¥–ª—è InputPaymentCredentials

    def __init__(self):
        pass

    def to_dict(self):
        return {"_": "inputPaymentCredentialsStars"}

    def _bytes(self):
        return self.CONSTRUCTOR_ID.to_bytes(4, "little")


async def send_snakebox_gift(client, recipient_id: int, recipient_hash: int, gift_msg_id: int):
    """
    –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–¥–∞—Ä–∫–∞ —á–µ—Ä–µ–∑ MTProto (Telethon) –ø–ª–∞—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:
    ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–≤–æ–π—Å, –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã, —Å—Ä–∞–∑—É –æ–ø–ª–∞—á–∏–≤–∞–µ–º –∑–≤—ë–∑–¥–∞–º–∏.
    """
    try:
        logger.info("üí∏ –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤—ë–∑–¥–∞–º–∏...")

        invoice = types.InputInvoiceStarGiftTransfer(
            stargift=types.InputSavedStarGiftUser(msg_id=gift_msg_id),
            to_id=types.InputPeerUser(user_id=recipient_id, access_hash=recipient_hash)
        )

        form = await client(functions.payments.GetPaymentFormRequest(invoice=invoice))

        if not hasattr(form, "form_id"):
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å form_id –¥–ª—è –æ–ø–ª–∞—Ç—ã")

        logger.info(f"üßæ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã #{form.form_id}, –≤–∞–ª—é—Ç–∞: {form.invoice.currency}")

        creds = InputPaymentCredentialsStars()

        result = await client(functions.payments.SendPaymentFormRequest(
            form_id=form.form_id,
            invoice=invoice,
            credentials=creds
        ))

        logger.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω!")
        logger.info(f"–û—Ç–≤–µ—Ç Telegram: {result}")
        return result

    except errors.RPCError as e:
        logger.error(f"‚ùå RPC –æ—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")
        logger.error(e)
    except Exception as e:
        logger.exception(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")

    return None
