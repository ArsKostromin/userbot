import asyncio
import logging
from telethon import functions, types, errors

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


async def send_snakebox_gift(client):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∞—Ä–æ–∫ "Snake Box" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @jhgvcbcg (ID: 1207534564)
    —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ Telethon (payments.transferStarGift).
    –°–æ–≤–º–µ—Å—Ç–∏–º —Å telethon==1.41.2.

    ‚ö†Ô∏è –î–ª—è collectible gifts —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ Stars.
    """
    msg_id = 41
    user_id = 1207534564
    access_hash = -8813161918532140746

    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–¥–∞—Ä–∫–∞ 'Snake Box' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @jhgvcbcg")

        stargift = types.InputSavedStarGiftUser(msg_id=msg_id)
        to_peer = types.InputPeerUser(user_id=user_id, access_hash=access_hash)

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–æ–∫
        result = await client(functions.payments.TransferStarGiftRequest(
            stargift=stargift,
            to_id=to_peer
        ))

        logger.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ 'Snake Box' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @jhgvcbcg")
        return result

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    #  –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫ Telethon
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    except errors.BadRequestError as e:
        err_msg = str(e)

        if "PAYMENT_REQUIRED" in err_msg:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ (PAYMENT_REQUIRED)")
            logger.info("üí° Gift –º–æ–∂–µ—Ç –±—ã—Ç—å collectible. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å Stars —á–µ—Ä–µ–∑ invoice:")
            logger.info("   1. –ü–æ–ª—É—á–∏—Ç—å InputInvoiceStarGiftTransfer –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞")
            logger.info("   2. –í—ã–∑–≤–∞—Ç—å payments.getPaymentForm —Å —ç—Ç–∏–º invoice")
            logger.info("   3. –ü—Ä–æ–π—Ç–∏ –æ–ø–ª–∞—Ç—É Stars —á–µ—Ä–µ–∑ paymentFormStarGift")
            logger.info("   4. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã–∑–≤–∞—Ç—å TransferStarGiftRequest —Å–Ω–æ–≤–∞")
        elif "STARGIFT_NOT_FOUND" in err_msg:
            logger.error("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (Snake Box) –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        elif "PEER_ID_INVALID" in err_msg:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id –∏–ª–∏ access_hash –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        else:
            logger.exception(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram API: {err_msg}")

    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")
        raise