import logging
from telethon import errors

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


async def send_snakebox_gift(client, recipient_id: int, recipient_hash: int, gift_msg_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ raw MTProto.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç invoke —Å TL-—Å—ã—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ –≤:
    https://docs.telethon.dev/en/stable/concepts/full-api.html#invoking-raw-methods
    """

    logger.info("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è—é raw-MTProto –∑–∞–ø—Ä–æ—Å payments.transferStarGift ...")

    # TL-—Å—ã—Ä–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî —Ç–æ—á–Ω–æ –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram
    raw_request = {
        "_": "payments.transferStarGift",
        "stargift": {
            "_": "inputSavedStarGiftUser",
            "msg_id": gift_msg_id
        },
        "to_id": {
            "_": "inputPeerUser",
            "user_id": recipient_id,
            "access_hash": recipient_hash
        }
    }

    try:
        # üß† –ö–ª—é—á–µ–≤–æ–µ ‚Äî invoke, –Ω–µ _call!
        result = await client.invoke(raw_request)
        logger.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω!")
        logger.info(f"–û—Ç–≤–µ—Ç Telegram: {result}")
        return result

    except errors.BadRequestError as e:
        msg = str(e)
        if "PAYMENT_REQUIRED" in msg:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars (PAYMENT_REQUIRED)")
            logger.info("üí° Gift, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, collectible ‚Äî –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å Stars —á–µ—Ä–µ–∑ invoice.")
        elif "STARGIFT_NOT_FOUND" in msg:
            logger.error("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (msg_id) –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        elif "PEER_ID_INVALID" in msg:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id –∏–ª–∏ access_hash –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        else:
            logger.exception(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram API: {msg}")
        return None

    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ raw-–≤—ã–∑–æ–≤–µ: {e}")
        return None
