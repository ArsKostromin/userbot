import logging
from telethon import functions, types, errors

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


async def send_snakebox_gift(client, recipient_id: int, recipient_hash: int, gift_msg_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π MTProto –º–µ—Ç–æ–¥:
    payments.transferStarGift (–≤—ã–∑–æ–≤ Telethon TL-—Ñ—É–Ω–∫—Ü–∏–∏).
    """

    logger.info("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ Telethon TL-—Ñ—É–Ω–∫—Ü–∏—é payments.transferStarGift ...")

    try:
        # üß± –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å—Ç—Ä–æ–≥–æ –ø–æ TL —Å—Ö–µ–º–µ
        request = functions.payments.TransferStarGiftRequest(
            stargift=types.InputSavedStarGiftUser(
                msg_id=gift_msg_id
            ),
            to_id=types.InputPeerUser(
                user_id=recipient_id,
                access_hash=recipient_hash
            )
        )

        # üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º MTProto-–≤—ã–∑–æ–≤
        result = await client(request)

        logger.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω!")
        logger.info(f"–û—Ç–≤–µ—Ç Telegram: {result}")

        return result

    except errors.BadRequestError as e:
        msg = str(e)
        if "PAYMENT_REQUIRED" in msg:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars (PAYMENT_REQUIRED)")
            logger.info(msg)
        elif "STARGIFT_NOT_FOUND" in msg:
            logger.error("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (msg_id) –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        elif "PEER_ID_INVALID" in msg:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id –∏–ª–∏ access_hash –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        else:
            logger.exception(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram API: {msg}")
        return None

    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ payments.transferStarGift: {e}")
        return None
