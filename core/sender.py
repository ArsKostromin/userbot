import logging
from telethon import functions, types, errors
from telethon.tl import TLObject
from telethon.utils import pack_bytes

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


# üîß –ú–∏–Ω–∏-–∫–ª–∞—Å—Å –¥–ª—è InputPaymentCredentialsStars (—Ç–∞–∫ –∫–∞–∫ Telethon –µ–≥–æ –Ω–µ –∑–Ω–∞–µ—Ç)
class InputPaymentCredentialsStars(TLObject):
    CONSTRUCTOR_ID = 0xbbf2dda0  # —Ç–æ—Ç —Å–∞–º—ã–π –∏–∑ TL —Å—Ö–µ–º—ã
    SUBCLASS_OF_ID = 0x1aa3e617  # –æ–±—â–∏–π ID InputPaymentCredentials

    def __init__(self):
        pass

    def to_dict(self):
        return {"_": "inputPaymentCredentialsStars"}

    def _bytes(self):
        # –ø—Ä–æ—Å—Ç–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        return pack_bytes(self.CONSTRUCTOR_ID)


async def send_snakebox_gift(client, recipient_id: int, recipient_hash: int, gift_msg_id: int):
    logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –æ–ø–ª–∞—Ç—É...")

    try:
        try:
            # üîπ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞–ø—Ä—è–º—É—é
            result = await client(functions.payments.TransferStarGiftRequest(
                stargift=types.InputSavedStarGiftUser(msg_id=gift_msg_id),
                to_id=types.InputPeerUser(
                    user_id=recipient_id,
                    access_hash=recipient_hash
                )
            ))
            logger.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –æ–ø–ª–∞—Ç—ã!")
            return result

        except errors.RPCError as e:
            if "PAYMENT_REQUIRED" not in str(e):
                raise
            logger.warning("üí∏ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏, –≥–æ—Ç–æ–≤–∏–º –∏–Ω–≤–æ–π—Å...")

        # üîπ –°–æ–∑–¥–∞—ë–º invoice –¥–ª—è –æ–ø–ª–∞—Ç—ã
        invoice = types.InputInvoiceStarGiftTransfer(
            stargift=types.InputSavedStarGiftUser(msg_id=gift_msg_id),
            to_id=types.InputPeerUser(
                user_id=recipient_id,
                access_hash=recipient_hash
            )
        )

        # üîπ –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã
        form = await client(functions.payments.GetPaymentFormRequest(invoice=invoice))
        logger.info(f"üßæ –ü–æ–ª—É—á–∏–ª–∏ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã: {form}")

        # üîπ –°–æ–∑–¥–∞—ë–º ‚Äúraw‚Äù –æ–±—ä–µ–∫—Ç credentials ‚Äî –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TLObject
        creds = InputPaymentCredentialsStars()

        # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–ª–∞—Ç—É
        result = await client(functions.payments.SendPaymentFormRequest(
            form_id=form.form_id,
            invoice=invoice,
            requested_info_id=None,
            shipping_option_id=None,
            credentials=creds
        ))

        logger.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω!")
        logger.info(f"–û—Ç–≤–µ—Ç Telegram: {result}")
        return result

    except errors.RPCError as e:
        msg = str(e)
        if "STARGIFT_NOT_FOUND" in msg:
            logger.error("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        elif "PEER_ID_INVALID" in msg:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id –∏–ª–∏ access_hash –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        elif "STARGIFT_OWNER_INVALID" in msg:
            logger.error("‚ùå –≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.")
        elif "STARGIFT_TRANSFER_TOO_EARLY" in msg:
            logger.error("‚è≥ –ü–æ–¥–∞—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ (–≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–æ).")
        else:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {msg}")
        return None

    except Exception as e:
        logger.exception(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")
        return None
