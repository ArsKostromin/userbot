import logging
from telethon import functions, types, errors
from telethon.tl.types import InputPaymentCredentials


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


class InputPaymentCredentialsStars(InputPaymentCredentials):
    """
    TL-—Ç–∏–ø:
    inputPaymentCredentialsStars#bbf2dda0 = InputPaymentCredentials;
    """
    CONSTRUCTOR_ID = 0xbbf2dda0
    SUBCLASS_OF_ID = 0x3417d728  # –æ–±—â–∏–π ID –¥–ª—è InputPaymentCredentials

    def __init__(self):
        pass

    def to_dict(self):
        return {"_": "inputPaymentCredentialsStars"}

    def _bytes(self):
        # TL-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –ø–æ–ª–µ–π ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ ID
        return self.CONSTRUCTOR_ID.to_bytes(4, "little")

async def send_snakebox_gift(client, recipient_id: int, recipient_hash: int, gift_msg_id: int):
    logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –æ–ø–ª–∞—Ç—É...")

    try:
        # 1Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        try:
            result = await client(functions.payments.TransferStarGiftRequest(
                stargift=types.InputSavedStarGiftUser(msg_id=gift_msg_id),
                to_id=types.InputPeerUser(user_id=recipient_id, access_hash=recipient_hash)
            ))
            logger.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –æ–ø–ª–∞—Ç—ã!")
            return result

        except errors.RPCError as e:
            if "PAYMENT_REQUIRED" not in str(e):
                raise
            logger.warning("üí∏ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏, –≥–æ—Ç–æ–≤–∏–º –∏–Ω–≤–æ–π—Å...")

        # 2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º invoice –¥–ª—è –æ–ø–ª–∞—Ç—ã
        invoice = types.InputInvoiceStarGiftTransfer(
            stargift=types.InputSavedStarGiftUser(msg_id=gift_msg_id),
            to_id=types.InputPeerUser(user_id=recipient_id, access_hash=recipient_hash)
        )

        # 3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã
        form = await client(functions.payments.GetPaymentFormRequest(invoice=invoice))
        logger.info(f"üßæ –ü–æ–ª—É—á–∏–ª–∏ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã: {form}")

        # 4Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π TLObject –≤–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞—Ä—è
        creds = InputPaymentCredentialsStars()

        # 5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–ª–∞—Ç—É
        result = await client(functions.payments.SendPaymentFormRequest(
            form_id=form.form_id,
            invoice=invoice,
            credentials=creds
        ))

        logger.info("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω!")
        logger.info(f"–û—Ç–≤–µ—Ç Telegram: {result}")
        return result

    except Exception as e:
        logger.exception(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")
        return None
